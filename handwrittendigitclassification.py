# -*- coding: utf-8 -*-
"""HandWrittenDigitClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w4qWjy2yx6i7t5NDoad1Ddgijt_gwmPA
"""

"""Loading MNIST dataset for training the model"""
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Flatten
from tensorflow.keras.optimizers import SGD

import matplotlib.pyplot as plt

(trainX, trainY), (testX, testY) = mnist.load_data()

print('Shape of Training dataset: X={}, y={}'.format(trainX.shape, trainY.shape))
print('Shape of Testing dataset: X={}, y={}'.format(testX.shape, testY.shape))

for i in range(3*3):
  plt.subplot(331 + i)
  plt.imshow(trainX[10*i], cmap=plt.get_cmap('Blues'))

plt.show()

trainX = trainX.reshape((trainX.shape[0], 28, 28, 1))
testX = testX.reshape((testX.shape[0], 28, 28, 1))

trainY = to_categorical(trainY)
testY = to_categorical(testY)

train_norm = trainX.astype('float32')
test_norm = testX.astype('float32')

train_norm_X = train_norm / 255.0
test_norm_X = test_norm / 255.0


trainX = train_norm_X
testX = test_norm_X

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(28, 28, 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform'))
model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))
model.add(Dense(10, activation='softmax'))
# compile model
opt = SGD(learning_rate=0.01, momentum=0.9)
model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])

model.fit(trainX, trainY, epochs=10, batch_size=32, verbose=0)
model.save('Final_model')

_, acc = model.evaluate(testX, testY, verbose=0)
print('> %.3f' % (acc * 100.0))

from numpy import argmax
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.models import load_model


def load_image(filename):
  img = load_img(filename, grayscale=True, target_size=(28, 28))
  img = img_to_array(img)
  img = img.reshape(1, 28, 28, 1)
  img = img.astype('float32')
  img = img / 255.0
  return img

import matplotlib.pyplot as plt

def load_image(filename):
  img = load_img(filename, grayscale=True, target_size=(28, 28))
  img = img_to_array(img)
  img = img.reshape(1, 28, 28, 1)
  img = img.astype('float32')
  img = img / 255.0
  return img

img = load_img("/content/test5.jpeg")

plt.imshow(img, cmap=plt.get_cmap('Blues'))

def run_example(path):
  from PIL import Image
  img = load_image(path)
  
  model = load_model('Final_model')
  predict_value = model.predict(img)
  digit = argmax(predict_value)
  print("Predicted label for the given image is: ",digit)

run_example("/content/test5.jpeg")